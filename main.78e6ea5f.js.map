{"version":3,"sources":["modules/Game.class.js","scripts/main.js"],"names":["Game","initialState","console","log","module","exports","require","game","filledCells","score","document","querySelector","state","structuredClone","cells","querySelectorAll","button","messageStart","messageWin","messageLose","addRandomNumInCells","randomRowIndex","Math","round","random","randomColumnIndex","cellTextContent","length","textContent","getScore","changeRealState","i","floor","className","canGameContinue","isSomethingChanged","j","addEventListener","restart","start","e","keyCode","moveLeft","moveUp","moveRight","moveDown","some","cell","totalScore","reduce","sum","num","jWasUsed","n","every","ind","push","iWasUsed"],"mappings":"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","file":"main.78e6ea5f.js","sourceRoot":"..\\src","sourcesContent":["'use strict';\n\n/**\n * This class represents the game.\n * Now it has a basic structure, that is needed for testing.\n * Feel free to add more props and methods if needed.\n */\nclass Game {\n  /**\n   * Creates a new game instance.\n   *\n   * @param {number[][]} initialState\n   * The initial state of the board.\n   * @default\n   * [[0, 0, 0, 0],\n   *  [0, 0, 0, 0],\n   *  [0, 0, 0, 0],\n   *  [0, 0, 0, 0]]\n   *\n   * If passed, the board will be initialized with the provided\n   * initial state.\n   */\n  constructor(initialState) {\n    this.initialState = initialState;\n    // eslint-disable-next-line no-console\n    console.log(initialState);\n  }\n\n  moveLeft() {}\n  moveRight() {}\n  moveUp() {}\n  moveDown() {}\n\n  /**\n   * @returns {number}\n   */\n  getScore() {}\n\n  /**\n   * @returns {number[][]}\n   */\n  getState() {}\n\n  /**\n   * Returns the current game status.\n   *\n   * @returns {string} One of: 'idle', 'playing', 'win', 'lose'\n   *\n   * `idle` - the game has not started yet (the initial state);\n   * `playing` - the game is in progress;\n   * `win` - the game is won;\n   * `lose` - the game is lost\n   */\n  getStatus() {}\n\n  /**\n   * Starts the game.\n   */\n  start() {}\n\n  /**\n   * Resets the game.\n   */\n  restart() {}\n\n  // Add your own methods here\n}\n\nmodule.exports = Game;\n","'use strict';\n\n// Uncomment the next lines to use your game instance in the browser\nconst initialState = [\n  [0, 0, 0, 0],\n  [0, 0, 0, 0],\n  [0, 0, 0, 0],\n  [0, 0, 0, 0],\n];\n\nconst Game = require('../modules/Game.class');\nconst game = new Game(initialState);\n\nlet filledCells = 0;\nconst score = document.querySelector('.game-score');\n\nlet state = structuredClone(initialState);\n\nconst cells = document.querySelectorAll('.field-cell');\nconst button = document.querySelector('.button');\nconst messageStart = document.querySelector('.message-start');\nconst messageWin = document.querySelector('.message-win');\nconst messageLose = document.querySelector('.message-lose');\n\nbutton.addEventListener('click', () => {\n  if (button.className === 'button restart') {\n    game.restart();\n  }\n\n  if (button.className === 'button start') {\n    game.start();\n  }\n});\n\ndocument.addEventListener('keydown', (e) => {\n  switch (e.keyCode) {\n    case 37:\n      game.moveLeft();\n      break;\n    case 38:\n      game.moveUp();\n      break;\n    case 39:\n      game.moveRight();\n      break;\n    case 40:\n      game.moveDown();\n  }\n\n  if ([...cells].some((cell) => cell.textContent === '2048')) {\n    messageWin.className = 'message message-win';\n  }\n\n  if (filledCells === cells.length && !canGameContinue()) {\n    messageLose.className = 'message message-lose';\n  }\n});\n\ngame.start = () => {\n  messageStart.className = 'message message-start hidden';\n  messageLose.className = 'message message-lose hidden';\n  messageWin.className = 'message message-win hidden';\n  button.className = 'button restart';\n  button.textContent = 'Restart';\n  addRandomNumInCells();\n  addRandomNumInCells();\n};\n\ngame.restart = () => {\n  filledCells = 0;\n  score.textContent = 0;\n  state = structuredClone(initialState);\n  game.start();\n};\n\ngame.getScore = () => {\n  let totalScore = 0;\n\n  for (const raw of state) {\n    totalScore += raw.reduce((sum, num) => sum + num);\n  }\n\n  return totalScore;\n};\n\nfunction addRandomNumInCells() {\n  let randomRowIndex = Math.round(Math.random() * 3);\n  let randomColumnIndex = Math.round(Math.random() * 3);\n  const cellTextContent = Math.random() < 0.1 ? 4 : 2;\n\n  while (\n    state[randomRowIndex][randomColumnIndex] > 0 &&\n    filledCells < cells.length\n  ) {\n    randomRowIndex = Math.round(Math.random() * 3);\n    randomColumnIndex = Math.round(Math.random() * 3);\n  }\n\n  state[randomRowIndex][randomColumnIndex] = cellTextContent;\n  filledCells++;\n  score.textContent = game.getScore();\n  changeRealState();\n}\n\nfunction changeRealState() {\n  for (let i = 0; i < cells.length; i++) {\n    cells[i].textContent =\n      state[Math.floor(i / 4)][i % 4] === 0\n        ? ''\n        : state[Math.floor(i / 4)][i % 4];\n\n    cells[i].className =\n      state[Math.floor(i / 4)][i % 4] === 0\n        ? 'field-cell'\n        : `field-cell field-cell--${state[Math.floor(i / 4)][i % 4]}`;\n  }\n}\n\nfunction canGameContinue() {\n  let isSomethingChanged = false;\n\n  for (let i = state.length - 2; i >= 0; i--) {\n    for (let j = 0; j < state[i].length; j++) {\n      if (state[i + 1][j] === state[i][j] && state[i][j] !== 0) {\n        isSomethingChanged = true;\n      }\n    }\n  }\n\n  for (let i = state.length - 1; i > 0; i--) {\n    for (let j = 0; j < state[i].length; j++) {\n      if (state[i - 1][j] === state[i][j] && state[i][j] !== 0) {\n        isSomethingChanged = true;\n      }\n    }\n  }\n\n  for (let i = 0; i < state.length; i++) {\n    for (let j = 1; j < state[i].length; j++) {\n      if (state[i][j - 1] === state[i][j] && state[i][j] !== 0) {\n        isSomethingChanged = true;\n      }\n    }\n  }\n\n  for (let i = 0; i < state.length; i++) {\n    for (let j = state[i].length - 2; j >= 0; j--) {\n      if (state[i][j + 1] === state[i][j] && state[i][j] !== 0) {\n        isSomethingChanged = true;\n      }\n    }\n  }\n\n  return isSomethingChanged;\n}\n\ngame.moveDown = () => {\n  let isSomethingChanged = false;\n  const jWasUsed = [];\n\n  for (let n = 0; n < state.length; n++) {\n    for (let i = state.length - 2; i >= 0; i--) {\n      for (let j = 0; j < state[i].length; j++) {\n        if (\n          state[i + 1][j] === state[i][j] &&\n          state[i][j] !== 0 &&\n          jWasUsed.every((ind) => ind !== j)\n        ) {\n          if (\n            state[0][j] !== 0 &&\n            state[3][j] !== 0 &&\n            state[0][j] === state[1][j] &&\n            state[2][j] === state[3][j]\n          ) {\n            state[3][j] = state[2][j] * 2;\n            state[2][j] = state[1][j] * 2;\n            state[1][j] = 0;\n            state[0][j] = 0;\n            isSomethingChanged = true;\n            jWasUsed.push(j);\n            filledCells -= 2;\n            continue;\n          }\n          state[i + 1][j] *= 2;\n          state[i][j] = 0;\n          isSomethingChanged = true;\n          jWasUsed.push(j);\n          filledCells--;\n        }\n\n        if (state[i + 1][j] === 0 && state[i][j] !== 0) {\n          [state[i + 1][j], state[i][j]] = [state[i][j], state[i + 1][j]];\n          isSomethingChanged = true;\n        }\n      }\n    }\n  }\n\n  if (isSomethingChanged) {\n    addRandomNumInCells();\n  }\n};\n\ngame.moveUp = () => {\n  let isSomethingChanged = false;\n  const jWasUsed = [];\n\n  for (let n = 0; n < state.length; n++) {\n    for (let i = state.length - 1; i > 0; i--) {\n      for (let j = 0; j < state[i].length; j++) {\n        if (\n          state[i - 1][j] === state[i][j] &&\n          state[i][j] !== 0 &&\n          jWasUsed.every((ind) => ind !== j)\n        ) {\n          if (\n            state[0][j] !== 0 &&\n            state[3][j] !== 0 &&\n            state[0][j] === state[1][j] &&\n            state[2][j] === state[3][j]\n          ) {\n            state[0][j] = state[1][j] * 2;\n            state[1][j] = state[2][j] * 2;\n            state[2][j] = 0;\n            state[3][j] = 0;\n            isSomethingChanged = true;\n            jWasUsed.push(j);\n            filledCells -= 2;\n            continue;\n          }\n          state[i - 1][j] *= 2;\n          state[i][j] = 0;\n          isSomethingChanged = true;\n          jWasUsed.push(j);\n          filledCells--;\n        }\n\n        if (state[i - 1][j] === 0 && state[i][j] !== 0) {\n          [state[i - 1][j], state[i][j]] = [state[i][j], state[i - 1][j]];\n          isSomethingChanged = true;\n        }\n      }\n    }\n  }\n\n  if (isSomethingChanged) {\n    addRandomNumInCells();\n  }\n};\n\ngame.moveLeft = () => {\n  let isSomethingChanged = false;\n  const iWasUsed = [];\n\n  for (let n = 0; n < state.length; n++) {\n    for (let i = 0; i < state.length; i++) {\n      for (let j = 1; j < state[i].length; j++) {\n        if (\n          state[i][j - 1] === state[i][j] &&\n          state[i][j] !== 0 &&\n          iWasUsed.every((ind) => ind !== i)\n        ) {\n          if (\n            state[i][0] !== 0 &&\n            state[i][3] !== 0 &&\n            state[i][0] === state[i][1] &&\n            state[i][2] === state[i][3]\n          ) {\n            state[i][0] = state[i][1] * 2;\n            state[i][1] = state[i][2] * 2;\n            state[i][2] = 0;\n            state[i][3] = 0;\n            isSomethingChanged = true;\n            iWasUsed.push(i);\n            filledCells -= 2;\n            continue;\n          }\n          state[i][j - 1] *= 2;\n          state[i][j] = 0;\n          isSomethingChanged = true;\n          iWasUsed.push(i);\n          filledCells--;\n        }\n\n        if (state[i][j - 1] === 0 && state[i][j] !== 0) {\n          [state[i][j - 1], state[i][j]] = [state[i][j], state[i][j - 1]];\n          isSomethingChanged = true;\n        }\n      }\n    }\n  }\n\n  if (isSomethingChanged) {\n    addRandomNumInCells();\n  }\n};\n\ngame.moveRight = () => {\n  let isSomethingChanged = false;\n  const iWasUsed = [];\n\n  for (let n = 0; n < state.length; n++) {\n    for (let i = 0; i < state.length; i++) {\n      for (let j = state[i].length - 2; j >= 0; j--) {\n        if (\n          state[i][j + 1] === state[i][j] &&\n          state[i][j] !== 0 &&\n          iWasUsed.every((ind) => ind !== i)\n        ) {\n          if (\n            state[i][0] !== 0 &&\n            state[i][3] !== 0 &&\n            state[i][0] === state[i][1] &&\n            state[i][2] === state[i][3]\n          ) {\n            state[i][3] = state[i][2] * 2;\n            state[i][2] = state[i][1] * 2;\n            state[i][1] = 0;\n            state[i][0] = 0;\n            isSomethingChanged = true;\n            iWasUsed.push(i);\n            filledCells -= 2;\n            continue;\n          }\n          state[i][j + 1] *= 2;\n          state[i][j] = 0;\n          isSomethingChanged = true;\n          iWasUsed.push(i);\n          filledCells--;\n        }\n\n        if (state[i][j + 1] === 0 && state[i][j] !== 0) {\n          [state[i][j + 1], state[i][j]] = [state[i][j], state[i][j + 1]];\n          isSomethingChanged = true;\n        }\n      }\n    }\n  }\n\n  if (isSomethingChanged) {\n    addRandomNumInCells();\n  }\n};\n"]}